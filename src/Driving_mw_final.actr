(set-task "actr.tasks.driving.Driving")

; problems: if car is noticed after attend-near is called
;	after loop-not-stable

(sgp :iu 10 :emma t :v t :ans 0.5)

(add-dm 
    (goal isa drive)
    (attend isa goal state attend)
    (wander isa goal state wander)
    (item1 isa memory awareness wander)
    (item2 isa memory awareness wander)
    (item3 isa memory awareness wander)
    (item4 isa memory awareness wander)
    (item5 isa memory awareness wander)
    (item6 isa memory awareness wander)
    (item7 isa memory awareness wander)
    (item8 isa memory awareness wander)
    (item9 isa memory awareness wander)
    (item10 isa memory awareness wander)
    (item11 isa memory awareness wander)
    (item12 isa memory awareness wander)
    (item13 isa memory awareness wander)
    (item14 isa memory awareness wander)
    (item15 isa memory awareness wander)
    (item16 isa memory awareness wander)
    (item17 isa memory awareness wander)
    (item18 isa memory awareness wander)
    (item19 isa memory awareness wander)
    (item20 isa memory awareness wander)
    (item21 isa memory awareness wander)
    (item22 isa memory awareness wander)
    (item23 isa memory awareness wander)
    (item24 isa memory awareness wander)
    (item25 isa memory awareness wander)
    (item26 isa memory awareness wander)
    (item27 isa memory awareness wander)
    (item28 isa memory awareness wander)
    (item29 isa memory awareness wander)
    (item30 isa memory awareness wander)
    (item31 isa memory awareness attend)
)

(set-all-base-levels 1000) 

(goal-focus goal)

;-----

(p drive*attend-near
    =goal>
        isa drive
        na nil
    ?visual-location>
        state free
        - buffer requested
    ?visual>
        state free
        buffer empty
==>
    +visual-location>
        isa visual-location
        kind near
    +retrieval>
        isa goal
)

(p start-mind-wander
    =retrieval>
        isa           goal 
        state         wander
    =goal>
        isa drive
        na nil
==>
    +retrieval>
        isa           memory
)

(p mind-wander
    =retrieval>
        isa           memory
        awareness     wander
    !eval! (is-not-over-lane)
==>
        
    +retrieval>
        isa memory 
)

(p stop-mind-wander
    =retrieval>
        isa           memory
        awareness     wander
    !eval! (is-over-lane)
==>
    +retrieval>
        isa  goal
        state  attend
    +visual-location>
        isa visual-location
        kind near
    =goal>
        isa drive
        na nil
)

(p remember-to-attend
    =retrieval>
        isa           memory
        awareness     attend
==>
    +retrieval>
        isa  goal
        state  attend
    +visual-location>
        isa visual-location
        kind near
    =goal>
        isa drive
        na nil
)


(p drive*process-near-attend-far
    =goal>
        isa drive
        na nil
    =retrieval>
        isa goal
        state attend
    =visual-location>
        isa visual-location
        kind near
        screen-x =nx
        screen-y =ny
        distance =nd
    ?visual>
        state free
        buffer empty
==>
    !bind! =na (image->angle =nx =nd)
    =goal>
        na =na
    +visual-location>
        isa visual-location
        kind car
)

(p drive*process-near-attend-far-car
    =goal>
        isa drive
        na nil
        fkind2 car
    =retrieval>
        state attend
    =visual-location>
        isa visual-location
        kind near
        screen-x =nx
        screen-y =ny
        distance =nd
    ?visual>
        state free
        buffer empty
==>
    !bind! =na (image->angle =nx =nd)
    =goal>
        na =na
    +visual-location>
        isa visual-location
        kind car
)

(p drive*process-car
    =goal>
        isa drive
        na =na
        fa nil
        na2    =na2
        fa2    =fa2
        fkind2 =fkind
        fthw2  =fthw2
        time2  =time2
    =visual-location>
        isa visual-location
        kind car
        kind =fkind
        screen-x =fx
        distance =fd
    ?visual>
        state free
        buffer empty
==>
    !bind! =fa (image->angle =fx =fd)
    !bind! =time (mp-time)
    !bind! =dna (- =na =na2)
    !bind! =dfa (- =fa =fa2)
    !bind! =dt (- =time =time2)
    !bind! =vna (my/ =dna =dt)
    !bind! =vfa (my/ =dfa =dt)
    !bind! =v (get-velocity)
    !bind! =fthw (get-thw =fd =v)
    !bind! =dthw (- =fthw =fthw2)
    !eval! (do-steer =na =dna =dfa =dt)
    !eval! (do-accelerate =fthw =dthw =dt)
    =goal>
        fkind =fkind
        fa =fa
        fd =fd
        vna =vna
        vfa =vfa
        time =time
        fthw =fthw
        v =v
        done t
    +visual>
        isa move-attention
        screen-pos =visual-location
)

(p drive*process-without-old
    =goal>
        isa drive
        na =na
        fa nil
    =visual-location>
        isa visual-location
        kind =fkind
        screen-x =fx
        distance =fd
    ?visual>
        state free
        buffer empty
==>
    !bind! =fa (image->angle =fx =fd)
    !bind! =v (get-velocity)
    !bind! =fthw (get-thw =fd =v)
    !bind! =time (mp-time)
    =goal>
        na nil
        fa nil
        na2 =na
        fa2 =fa
        fd2 =fd
        fkind2 =fkind
        fthw2 =fthw
        time2 =time
    +visual-location>
        isa visual-location
        kind near
    +retrieval> 
        isa goal
        state attend
        
)
(spp drive*process-without-old :u 7)

(p drive*loop-stable
    =goal>
        isa drive
        na =na
        fa =fa
        vna =vna
        vfa =vfa
        fd =fd
        fkind =fkind
        fthw =fthw
        time =time
    =visual>
        isa car
    !eval! (is-car-stable =na =vna =vfa)
==>
    =goal>
        na nil
        fa nil
        na2 =na
        fa2 =fa
        fd2 =fd
        fkind2 =fkind
        fthw2 =fthw
        time2 =time
)

(p drive*loop-not-stable
    =goal>
        isa drive
        na =na
        fa =fa
        vna =vna
        vfa =vfa
        fd =fd
        fkind =fkind
        fthw =fthw
        time =time
    =visual>
        isa car
    !eval! (is-car-not-stable =na =vna =vfa)
==>
    =goal>
        na nil
        fa nil
        na2 =na
        fa2 =fa
        fd2 =fd
        fkind2 =fkind
        fthw2 =fthw
        time2 =time
    +visual-location>
        isa visual-location
        kind near
    +retrieval>
        isa goal
        state attend
)

(p drive*reset
    =goal>
        isa drive
    ?visual-location>
        state free
        - buffer requested
    ?visual>
        state free
        buffer empty
==>
    =goal>
        na nil
        fa nil
        na2 nil
        fa2 nil
        fkind2 nil
        fthw2 nil
        time2 nil
    +visual-location>
        isa visual-location
        kind near
)
(spp :u 1)
